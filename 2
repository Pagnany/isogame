use bevy::prelude::*;
use std::f32::consts::PI;

#[derive(PartialEq, Eq)]
pub enum EnemyType {
    UnderWater,
    AboveWater,
}

#[derive(Component)]
pub struct Enemy {
    pub height: f32,
    pub width: f32,
    pub under_water: EnemyType,
    pub movement_factor: f32,
}

pub fn enemy_movement_system(time: Res<Time>, mut query: Query<(&mut Enemy, &mut Transform)>) {
    for (mut enemy, mut transform) in query.iter_mut() {
        let mut x = transform.translation.x;
        let mut y = transform.translation.y;

        enemy.movement_factor += 0.01;
        y += (enemy.movement_factor * PI).sin() * 3.0;

        transform.translation = Vec3::new(x, y, 0.0);
    }
}
